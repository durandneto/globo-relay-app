{"version":3,"sources":["features/GloboRelay/tweetSlice.js","features/GloboRelay/DragAndDrop.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["tweetSlice","createSlice","name","initialState","savedTweets","term","tweets","controls","loading","preloading","error","reducers","setLoading","state","action","payload","setPreloading","setError","actions","getTweetsFromApi","setTerm","userName","dispatch","axios","get","then","response","console","log","catch","toString","getTweetRedux","tweet","TweetSaver","tweetRedux","useSelector","useState","saveTerm","useDispatch","useEffect","Fragment","style","backgroundColor","color","padding","label","onEvent","e","type","origin","event","data","value","App","configureStore","reducer","tweetReducer","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0QAGaA,EAAaC,YAAY,CACpCC,KAAM,QACNC,aAAc,CACZC,YAAa,GACbC,KAAM,GACNC,OAAQ,GACRC,SAAU,CACRC,SAAS,EACTC,YAAY,EACZC,MAAO,KAGXC,SAAU,CACRC,WAAY,SAACC,EAAOC,GAClBD,EAAMN,SAASC,QAAUM,EAAOC,SAElCC,cAAe,SAACH,EAAOC,GACrBD,EAAMN,SAASE,WAAaK,EAAOC,SAErCE,SAAU,SAACJ,EAAOC,GAChBD,EAAMN,SAASG,MAAQI,EAAOC,Y,EAK4Bf,EAAWkB,QAA5DN,E,EAAAA,WAAYK,E,EAAAA,SAAUD,E,EAAAA,cAExBG,G,EAFuCC,QAEpB,SAAAC,GAAQ,OAAI,SAAAC,GAE1CA,EAASV,GAAW,IACpBU,EAASL,EAAS,KAClBM,IAAMC,IAAN,6CAAgDH,EAAhD,cACCI,MAAK,SAAAC,GAEJC,QAAQC,IAAIF,GACZJ,EAASV,GAAW,OAErBiB,OAAM,SAAAnB,GAELY,EAASV,GAAW,IACpBU,EAASL,EAASP,EAAMoB,aACxBH,QAAQC,IAAIlB,SAIHqB,EAAgB,SAAAlB,GAAK,OAAIA,EAAMmB,OAE7BhC,IAAf,QCxCO,SAASiC,IACd,IAAMC,EAAaC,YAAYJ,GADJ,EAEFK,mBAAS,IAFP,mBAEpB/B,EAFoB,KAEdgC,EAFc,KAGrBf,EAAWgB,cAMjB,OAJAC,qBAAU,WACRjB,EAASN,GAAc,MACvB,IAGA,kBAAC,IAAMwB,SAAP,KAEIN,EAAW3B,SAASG,OAClB,yBAAK+B,MAAO,CAACC,gBAAiB,MAAOC,MAAO,OAAQC,QAAS,OAEzDV,EAAW3B,SAASG,OAK5B,kBAAC,IAAD,eACEmC,MAAO,cACPvC,OAAQ4B,EAAW5B,QACf4B,EAAW3B,SAHjB,CAIEH,YAAa8B,EAAW9B,YACxB0C,QAAS,SAAAC,GAET,QAAQ,GACN,IAAgB,gBAAXA,EAAEC,KAGP,IAAgB,WAAXD,EAAEC,KAEL,MACF,IAAgB,YAAXD,EAAEC,MAAmC,WAAbD,EAAEE,OAC7B3B,EAASH,EAAiBd,IAC1B,MACF,IAAiB,YAAZ0C,EAAEG,OAAoC,UAAbH,EAAEE,OAE9BZ,EAASU,EAAEI,KAAKC,OAChB,MACF,IAAiB,kBAAZL,EAAEG,OAA0C,UAAbH,EAAEE,OAEpC3B,EAASH,EAAiBd,UC5CvBgD,MANf,WACE,OACE,kBAACpB,EAAD,OCFWqB,cAAe,CAC5BC,QAAS,CACPvB,MAAOwB,KCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uQCXN,IAAMC,EAAcC,4BAAH,KAUjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAACL,EAAD,MACA,kBAAC,EAAD,QAGJM,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,kB","file":"static/js/main.6169b3b0.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nexport const tweetSlice = createSlice({\r\n  name: 'tweet',\r\n  initialState: {\r\n    savedTweets: [],\r\n    term: '',\r\n    tweets: [],\r\n    controls: {\r\n      loading: false,\r\n      preloading: true,\r\n      error: '',\r\n    }\r\n  },\r\n  reducers: {\r\n    setLoading: (state, action) => {\r\n      state.controls.loading = action.payload\r\n    },\r\n    setPreloading: (state, action) => {\r\n      state.controls.preloading = action.payload\r\n    },\r\n    setError: (state, action) => {\r\n      state.controls.error = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { setLoading, setError, setPreloading, setTerm } = tweetSlice.actions\r\n\r\nexport const getTweetsFromApi = userName => dispatch => {\r\n  // Make a request for a user with a given ID\r\n  dispatch(setLoading(true))\r\n  dispatch(setError(''))\r\n  axios.get(`http://tweetsaver.herokuapp.com/?q=${userName}&count=10`)\r\n  .then(response => {\r\n    // handle success\r\n    console.log(response)\r\n    dispatch(setLoading(false))\r\n  })\r\n  .catch(error =>  {\r\n    // handle error\r\n    dispatch(setLoading(false))\r\n    dispatch(setError(error.toString()))\r\n    console.log(error)\r\n  })\r\n}\r\n// get reducer\r\nexport const getTweetRedux = state => state.tweet\r\n\r\nexport default tweetSlice.reducer\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport TweetSaverTemplate from 'react-pure-components/dist/Templates/GloboRelay'\r\n\r\nimport {\r\n  getTweetRedux,\r\n  getTweetsFromApi,\r\n  setPreloading\r\n} from './tweetSlice'\r\n\r\nexport function TweetSaver() {\r\n  const tweetRedux = useSelector(getTweetRedux)\r\n  const [term, saveTerm] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(setPreloading(false))\r\n  },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        tweetRedux.controls.error && (\r\n          <div style={{backgroundColor: \"red\", color: '#fff', padding: '3%'}}>\r\n            {\r\n              tweetRedux.controls.error\r\n            }\r\n          </div>\r\n        )\r\n      }\r\n      <TweetSaverTemplate\r\n        label={\"Tweet Saver\"}\r\n        tweets={tweetRedux.tweets}\r\n        {...tweetRedux.controls}\r\n        savedTweets={tweetRedux.savedTweets}\r\n        onEvent={e => {\r\n        // console.log(e)\r\n        switch (true) {\r\n          case e.type === \"onDragStart\":\r\n            // console.log(\"onDragStart\", e.tweet)\r\n            break\r\n          case e.type === \"onDrop\":\r\n            // console.log(\"onDrop\")\r\n            break\r\n          case e.type === \"onClick\" && e.origin === \"Button\":\r\n            dispatch(getTweetsFromApi(term))\r\n            break\r\n          case e.event === \"onKeyUp\" && e.origin === \"Input\":\r\n            // console.log(\"save keyword twitter\", e.data.value)\r\n            saveTerm(e.data.value)\r\n            break\r\n          case e.event === \"onKeyUpAction\" && e.origin === \"Input\":\r\n            // console.log(\"search for twitter\", e.data.value)\r\n            dispatch(getTweetsFromApi(term))\r\n            break\r\n        }\r\n        }}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { TweetSaver } from './features/GloboRelay/DragAndDrop';\r\n\r\nfunction App() {\r\n  return (\r\n    <TweetSaver />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport tweetReducer from '../features/GloboRelay/tweetSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tweet: tweetReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createGlobalStyle } from 'styled-components'\r\nconst GlobalStyle = createGlobalStyle`\r\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap');\r\n\r\n  body, html {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: \"Roboto\";\r\n  }\r\n`;\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <GlobalStyle />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}